{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/unexpected/app/(dashboard)/(profier)/profiers/[id]/components/PortfolioArea/data.ts"],"sourcesContent":["import { Column } from \"@/components/dashboard/table\";\n\nexport const columns: Column[] = [\n    {\n        name: \"Asset\",\n        uid: \"asset\",\n        sortable: false,\n    },\n    {\n        name: \"Price\",\n        uid: \"price\",\n        sortable: true,\n    },\n    {\n        name: \"Holding\",\n        uid: \"holding\",\n        sortable: true,\n    },\n    {\n        name: \"Value\",\n        uid: \"value\",\n        sortable: true,\n    }\n];\n\n"],"names":[],"mappings":";;;AAEO,MAAM,UAAoB;IAC7B;QACI,MAAM;QACN,KAAK;QACL,UAAU;IACd;IACA;QACI,MAAM;QACN,KAAK;QACL,UAAU;IACd;IACA;QACI,MAAM;QACN,KAAK;QACL,UAAU;IACd;IACA;QACI,MAAM;QACN,KAAK;QACL,UAAU;IACd;CACH"}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/unexpected/app/(dashboard)/(profier)/profiers/[id]/context.tsx"],"sourcesContent":["import { Profiler } from \"@/types\";\nimport React from \"react\"\n\nexport type ProfilerContextType = Partial<Profiler>\nexport const ProfilerContext = React.createContext<ProfilerContextType>({})\nexport const ProfilerProvider = ProfilerContext.Provider;\nexport const useProfiler = () => React.useContext(ProfilerContext)"],"names":[],"mappings":";;;;;;;;;AAIO,MAAM,gCAAkB,2KAAA,CAAA,UAAK,CAAC,aAAa,CAAsB,CAAC;AAClE,MAAM,mBAAmB,gBAAgB,QAAQ;AACjD,MAAM,cAAc;;IAAM,OAAA,2KAAA,CAAA,UAAK,CAAC,UAAU,CAAC;AAAe;GAApD"}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 56, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/unexpected/app/(dashboard)/(profier)/profiers/[id]/components/PortfolioArea/PortfolioTable.tsx"],"sourcesContent":["'use client';\n\nimport React from \"react\";\nimport { Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, Spinner, getKeyValue, Chip, Avatar } from \"@nextui-org/react\";\nimport { useInfiniteScroll } from \"@nextui-org/use-infinite-scroll\";\nimport { useAsyncList } from \"@react-stately/data\";\n\nimport { Portifolio, Token } from \"@/types\";\nimport { columns } from \"./data\";\nimport { useProfiler } from \"../../context\";\n\nexport default function TransactionsTable() {\n    const profiler = useProfiler();\n\n    const [isLoading, setIsLoading] = React.useState(false);\n    const [hasMore, setHasMore] = React.useState(false);\n\n    let list = useAsyncList<Portifolio>({\n        async load({ signal, cursor }) {\n            if (!profiler.portifolio) return { items: [] };\n\n            setIsLoading(true);\n\n            const start = cursor ? parseInt(cursor, 10) : 0;\n            const itemsPerPage = 10;\n            const end = start + itemsPerPage;\n\n            const items = profiler.portifolio.slice(start, end);\n            const hasMore = end < profiler.portifolio.length;\n\n            setHasMore(hasMore);\n            setIsLoading(false);\n\n            return {\n                items: items,\n                cursor: end.toString()\n            };\n        },\n    });\n\n    const [loaderRef, scrollerRef] = useInfiniteScroll({ hasMore, onLoadMore: list.loadMore });\n\n    const renderCell = React.useCallback((item: Portifolio, columnKey: React.Key) => {\n        const cellValue = getKeyValue(item, columnKey.toString());\n\n        switch (columnKey) {\n            case \"asset\":\n                const convertedToken = cellValue as Token;\n\n                return (\n                    <Chip\n                        variant=\"light\"\n                        size=\"lg\"\n                        classNames={{\n                            content: \"text-foreground\"\n                        }}\n                        startContent={\n                            <Avatar\n                                src={convertedToken.icon}\n                                alt={convertedToken.name}\n                                color=\"primary\"\n                                size=\"sm\"\n                                className=\"w-4 h-4\"\n                                radius=\"full\"\n                                showFallback\n                            />\n                        }\n                    >\n                        {convertedToken.symbol}\n                    </Chip>\n                )\n            case \"price\":\n                const convertedPrice = cellValue as any;\n\n                return (\n                    <p className=\"w-full overflow-clip\">{convertedPrice.toString()}</p>\n                )\n            case \"holding\":\n                const convertedHolding = cellValue as any;\n\n                return (\n                    <p className=\"w-full overflow-clip\">{convertedHolding.toString()}</p>\n                )\n            case \"value\":\n                const convertedValue = cellValue as any;\n\n                return (\n                    <p className=\"w-full overflow-clip\">{convertedValue.toString()}</p>\n                )\n            default:\n                return null;\n        }\n    }, []);\n\n    return (\n        <Table\n            isHeaderSticky\n            aria-label=\"Example table with infinite pagination\"\n            baseRef={scrollerRef}\n            fullWidth\n            bottomContent={\n                hasMore ? (\n                    <div className=\"flex w-full justify-center\">\n                        <Spinner ref={loaderRef} color=\"primary\" />\n                    </div>\n                ) : null\n            }\n            classNames={{\n                base: \"max-h-[520px] overflow-scroll bg-transparent\",\n                table: \"min-h-[400px]\",\n                wrapper: \"w-full bg-foreground-50\",\n            }}\n        >\n            <TableHeader columns={columns}>\n                {(column) => (\n                    <TableColumn\n                        key={column.uid}\n                        allowsSorting={column.sortable}\n                    >\n                        {column.name}\n                    </TableColumn>\n                )}\n            </TableHeader>\n            <TableBody\n                isLoading={isLoading}\n                items={list.items}\n                loadingContent={<Spinner color=\"white\" />}\n                emptyContent=\"No data found\"\n            >\n                {(item: Portifolio) => (\n                    <TableRow key={item.id} className=\"w-full hover:bg-foreground-100\">\n                        {(columnKey) =>\n                            <TableCell>\n                                {renderCell(item, columnKey)}\n                            </TableCell>}\n                    </TableRow>\n                )}\n            </TableBody>\n        </Table>\n    );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 265, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}