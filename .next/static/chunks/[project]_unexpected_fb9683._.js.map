{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/unexpected/app/(dashboard)/(project)/projects/[address]/components/TransactionsArea/data.ts"],"sourcesContent":["type Column = {\n    name: string;\n    uid: string;\n    sortable?: boolean;\n}\nexport const columns: Column[] = [\n    {\n        name: \"Time\",\n        uid: \"time\",\n        sortable: true,\n    },\n    {\n        name: \"From\",\n        uid: \"from\",\n        sortable: true,\n    },\n    {\n        name: \"To\",\n        uid: \"to\",\n        sortable: true,\n    },\n    {\n        name: \"Value\",\n        uid: \"value\",\n        sortable: true,\n    },\n    {\n        name: \"Token\",\n        uid: \"token\",\n        sortable: true,\n    },\n    {\n        name: \"Tags\",\n        uid: \"tags\",\n        sortable: false,\n    }\n];\n\n"],"names":[],"mappings":";;;AAKO,MAAM,UAAoB;IAC7B;QACI,MAAM;QACN,KAAK;QACL,UAAU;IACd;IACA;QACI,MAAM;QACN,KAAK;QACL,UAAU;IACd;IACA;QACI,MAAM;QACN,KAAK;QACL,UAAU;IACd;IACA;QACI,MAAM;QACN,KAAK;QACL,UAAU;IACd;IACA;QACI,MAAM;QACN,KAAK;QACL,UAAU;IACd;IACA;QACI,MAAM;QACN,KAAK;QACL,UAAU;IACd;CACH"}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/unexpected/types/index.ts"],"sourcesContent":["import { SVGProps } from \"react\";\n\n// ==============================\n// Frontend Types\n// ==============================\n\nexport type IconSvgProps = SVGProps<SVGSVGElement> & {\n  size?: number;\n};\n\n// ==============================\n// Core Types\n// ==============================\n\n// Transaction\nexport enum TransactionTagType {\n  Buy = \"Buy\",\n  Sell = \"Sell\",\n  Transfer = \"Transfer\",\n  Deposit = \"Deposit\",\n  Withdraw = \"Withdraw\",\n  Swap = \"Swap\",\n  Other = \"Other\",\n}\nexport interface Transaction {\n  id: string;\n  time: Date;\n  from: Profiler;\n  to: Profiler;\n  value: number | string;\n  token: Token;\n  tags: TransactionTagType[];\n}\n\n// Project\nexport interface Project {\n  address: string;\n  name: string;\n  description: string;\n\n  [key: string]: any;\n}\n\n// Profiler\nexport enum ProfilerTagType {\n  Whale = \"Whale\",\n  Fund = \"Fund\",\n  Anonymous = \"Anonymous\"\n}\nexport type Portifolio = {\n  id: string | number;\n  asset: Token;\n  price: number | string;\n  holding: number | string;\n  value: number | string;\n}\nexport interface Profiler {\n  name?: string;\n  address: string;\n  avatar?: string;\n  tag?: ProfilerTagType\n  portifolio?: Portifolio[]\n}\n\n\n// Token\n/**\n * Token\n * @param id Token id\n * @param name Token name\n * @param symbol Token symbol\n * @param address Token address\n * @param icon Token icon\n */\nexport interface Token {\n  id: string | number;\n  name: string;\n  value?: number;\n  symbol?: string;\n  address: string;\n  icon?: string;\n}\n\n\n// Key Metric\nexport interface MetricCategory {\n  id: string | number;\n  name: string;\n  metrics: KeyMetric[];\n}\nexport interface KeyMetric {\n  id: string | number;\n  name: string;\n  value: number | string;\n  unit: string;\n}"],"names":[],"mappings":";;;;;UAeY;;;;;;;;GAAA,uBAAA;;UA6BA;;;;GAAA,oBAAA"}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/unexpected/mock/index.tsx"],"sourcesContent":["import { KeyMetric, MetricCategory, Portifolio, Profiler, ProfilerTagType, Token, Transaction, TransactionTagType } from \"@/types\";\nimport { faker } from \"@faker-js/faker\";\n\n\nexport const mockProject = {\n    name: faker.company.name(),\n    address: faker.finance.ethereumAddress(),\n    floorPrice: faker.finance.amount({\n        symbol: \"$\",\n        autoFormat: true,\n    }),\n    avatar: faker.image.avatar(),\n    tvl: faker.finance.amount({\n        symbol: \"ETH\",\n    }),\n};\n\nexport const mockProjectsTransactions = Array.from({ length: 10 }, () => ({\n    id: faker.string.uuid(),// Add unique identifier\n    time: faker.date.recent(),\n    from: {\n        name: faker.person.suffix(),\n        address: faker.finance.ethereumAddress(),\n        avatar: faker.image.avatar(),\n    },\n    to: {\n        name: faker.person.suffix(),\n        address: faker.finance.ethereumAddress(),\n        avatar: faker.image.avatar(),\n    },\n    value: faker.finance.amount({\n        symbol: \"ETH\",\n    }),\n    token: {\n        id: faker.string.uuid(),\n        name: faker.finance.currencyName(),\n        symbol: faker.finance.currencySymbol(),\n        address: faker.finance.ethereumAddress(),\n        icon: faker.image.url(),\n    },\n    tags: [Math.random() > 0.5 ? TransactionTagType.Buy : TransactionTagType.Sell],\n} satisfies Transaction));\n\nexport const mockProjectDex = {\n    categories: [\n        {\n            id: \"1\",\n            name: \"Market Cap (30d)\",\n            metrics: [\n                {\n                    id: \"1\",\n                    name: \"Total Value Locked\",\n                    value: faker.finance.amount(),\n                    unit: \"ETH\",\n                },\n                {\n                    id: \"2\",\n                    name: \"Daily Active Users\",\n                    value: faker.number.float(),\n                    unit: \"Users\",\n                },\n                {\n                    id: \"3\",\n                    name: \"Transaction Volume\",\n                    value: faker.finance.amount(),\n                    unit: \"ETH\",\n                },\n                {\n                    id: \"4\",\n                    name: \"New Wallets Created\",\n                    value: faker.number.float(),\n                    unit: \"Wallets\",\n                },\n                {\n                    id: \"5\",\n                    name: \"Exchange Volume\",\n                    value: faker.finance.amount(),\n                    unit: \"ETH\",\n                },\n                {\n                    id: \"6\",\n                    name: \"Total Market Cap\",\n                    value: faker.finance.amount(),\n                    unit: \"ETH\",\n                },\n            ] satisfies KeyMetric[]\n        },\n        {\n            id: \"2\",\n            name: \"User Engagement\",\n            metrics: [\n                {\n                    id: \"1\",\n                    name: \"Daily Active Users\",\n                    value: faker.number.int({ min: 0, max: 100 }),\n                    unit: \"Users\",\n                },\n                {\n                    id: \"2\",\n                    name: \"Monthly Active Users\",\n                    value: faker.number.float({ min: 0, max: 100 }),\n                    unit: \"Users\",\n                },\n                {\n                    id: \"3\",\n                    name: \"Average Session Duration\",\n                    value: faker.number.float({ min: 0, max: 100 }),\n                    unit: \"Minutes\",\n                },\n                {\n                    id: \"4\",\n                    name: \"Bounce Rate\",\n                    value: faker.number.float({ min: 0, max: 100 }),\n                    unit: \"%\",\n                },\n                {\n                    id: \"5\",\n                    name: \"Session per User\",\n                    value: faker.number.float({ min: 0, max: 100 }),\n                    unit: \"Sessions\",\n                },\n                {\n                    id: \"6\",\n                    name: \"Retention Rate\",\n                    value: faker.number.float({ min: 0, max: 100 }),\n                    unit: \"%\",\n                }\n            ] satisfies KeyMetric[]\n        },\n        {\n            id: \"3\",\n            name: \"Financial Metrics\",\n            metrics: [\n                {\n                    id: \"1\",\n                    name: \"Revenue\",\n                    value: faker.finance.amount(),\n                    unit: \"USD\",\n                },\n                {\n                    id: \"2\",\n                    name: \"Profit\",\n                    value: faker.finance.amount(),\n                    unit: \"USD\",\n                },\n                {\n                    id: \"3\",\n                    name: \"Expenses\",\n                    value: faker.finance.amount(),\n                    unit: \"USD\",\n                },\n                {\n                    id: \"4\",\n                    name: \"Net Income\",\n                    value: faker.finance.amount(),\n                    unit: \"USD\",\n                },\n            ] satisfies KeyMetric[]\n        }\n    ] satisfies MetricCategory[]\n}\n\nexport const mockProfiler = {\n    name: faker.person.fullName(),\n    address: faker.finance.ethereumAddress(),\n    avatar: faker.image.avatar(),\n    tag: Math.random() > 0.2 ? ProfilerTagType.Whale : (Math.random() > 0.2 ? ProfilerTagType.Fund : ProfilerTagType.Anonymous),\n    portifolio: Array.from({ length: 2}, () => ({\n        id: faker.string.uuid(),\n        asset: {\n            id: faker.string.uuid(),\n            name: faker.finance.currencyName(),\n            symbol: faker.finance.currencySymbol(),\n            address: faker.finance.ethereumAddress(),\n            icon: faker.image.url(),\n        } satisfies Token,\n        price: faker.finance.amount(),\n        holding: faker.finance.amount(),\n        value: faker.finance.amount(),\n    } satisfies Portifolio)),\n} satisfies Profiler;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 279, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/unexpected/app/(dashboard)/(project)/projects/[address]/helper/index.ts"],"sourcesContent":["import { format, differenceInMinutes, differenceInHours, differenceInDays } from 'date-fns';\n\n// Time Helper\nexport function formatTime(inputTime: Date): string {\n  const now = new Date();\n  const diffInMinutes = differenceInMinutes(now, inputTime);\n  const diffInHours = differenceInHours(now, inputTime);\n  const diffInDays = differenceInDays(now, inputTime);\n\n  if (diffInDays < 30) {\n    if (diffInMinutes < 60) {\n      return `${diffInMinutes} minute${diffInMinutes !== 1 ? 's' : ''} ago`;\n    } else if (diffInHours < 24) {\n      return `${diffInHours} hour${diffInHours !== 1 ? 's' : ''} ago`;\n    } else {\n      return `${diffInDays} day${diffInDays !== 1 ? 's' : ''} ago`;\n    }\n  } else {\n    return format(inputTime, 'HH:mm/dd/MM/yyyy');\n  }\n}\n\n// Address Helper\ntype TruncateAddressType = \"start\" | \"end\" | \"start-to-end\";\nexport function truncateAddress(address: string, type: TruncateAddressType = \"start-to-end\"): string {\n  if (type === \"start\") {\n    return `${address.slice(0, 5)}`;\n  } else if (type === \"end\") {\n    return `${address.slice(-4)}`;\n  } else {\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  }\n}"],"names":[],"mappings":";;;;;;;;;;AAGO,SAAS,WAAW,SAAe;IACxC,MAAM,MAAM,IAAI;IAChB,MAAM,gBAAgB,CAAA,GAAA,oKAAA,CAAA,sBAAmB,AAAD,EAAE,KAAK;IAC/C,MAAM,cAAc,CAAA,GAAA,kKAAA,CAAA,oBAAiB,AAAD,EAAE,KAAK;IAC3C,MAAM,aAAa,CAAA,GAAA,iKAAA,CAAA,mBAAgB,AAAD,EAAE,KAAK;IAEzC,IAAI,aAAa,IAAI;QACnB,IAAI,gBAAgB,IAAI;YACtB,OAAO,CAAC,EAAE,cAAc,OAAO,EAAE,kBAAkB,IAAI,MAAM,GAAG,IAAI,CAAC;QACvE,OAAO,IAAI,cAAc,IAAI;YAC3B,OAAO,CAAC,EAAE,YAAY,KAAK,EAAE,gBAAgB,IAAI,MAAM,GAAG,IAAI,CAAC;QACjE,OAAO;YACL,OAAO,CAAC,EAAE,WAAW,IAAI,EAAE,eAAe,IAAI,MAAM,GAAG,IAAI,CAAC;QAC9D;IACF,OAAO;QACL,OAAO,CAAA,GAAA,uKAAA,CAAA,SAAM,AAAD,EAAE,WAAW;IAC3B;AACF;AAIO,SAAS,gBAAgB,OAAe,EAAE,OAA4B,cAAc;IACzF,IAAI,SAAS,SAAS;QACpB,OAAO,CAAC,EAAE,QAAQ,KAAK,CAAC,GAAG,GAAG,CAAC;IACjC,OAAO,IAAI,SAAS,OAAO;QACzB,OAAO,CAAC,EAAE,QAAQ,KAAK,CAAC,CAAC,GAAG,CAAC;IAC/B,OAAO;QACL,OAAO,CAAC,EAAE,QAAQ,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,QAAQ,KAAK,CAAC,CAAC,GAAG,CAAC;IACxD;AACF"}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 325, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/unexpected/app/(dashboard)/(project)/projects/[address]/components/TransactionsArea/TransactionsTable.tsx"],"sourcesContent":["'use client';\n\nimport React from \"react\";\nimport { Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, Pagination, Spinner, getKeyValue, Tab, Chip, Avatar } from \"@nextui-org/react\";\nimport { useInfiniteScroll } from \"@nextui-org/use-infinite-scroll\";\nimport { useAsyncList } from \"@react-stately/data\";\n\nimport { columns } from \"./data\";\nimport { Profiler, Token, Transaction, TransactionTagType } from \"@/types\";\nimport { mockProjectsTransactions } from \"@/mock\";\nimport { formatTime, truncateAddress } from \"../../helper\";\nimport { Copy02Icon } from \"hugeicons-react\";\n\nexport default function TransactionsTable() {\n    const [isLoading, setIsLoading] = React.useState(false);\n    const [hasMore, setHasMore] = React.useState(false);\n\n    let list = useAsyncList<Transaction>({\n        async load({ signal, cursor }) {\n            if (cursor) {\n                setIsLoading(false);\n            }\n\n            return {\n                items: mockProjectsTransactions,\n            };\n        },\n    });\n\n    const [loaderRef, scrollerRef] = useInfiniteScroll({ hasMore, onLoadMore: list.loadMore });\n\n    const renderCell = React.useCallback((item: Transaction, columnKey: React.Key) => {\n        const cellValue = getKeyValue(item, columnKey.toString());\n\n        switch (columnKey) {\n            case \"time\":\n                const convertedTime = new Date(cellValue);\n\n                return (\n                    <p className=\"text-sm w-fit text-nowrap\">\n                        {formatTime(convertedTime)}\n                    </p>\n                );\n            case \"from\":\n                const convertedFrom = cellValue as Profiler;\n\n                return (\n                    <Chip\n                        size=\"lg\"\n                        radius=\"md\"\n                        className=\"shadow bg-foreground-50 dark:bg-foreground-100 text-foreground-900 text-sm gap-2\"\n                        startContent={\n                            <Avatar\n                                src={convertedFrom.avatar}\n                                alt={convertedFrom.name}\n                                color=\"primary\"\n                                size=\"sm\"\n                                className=\"w-4 h-4\"\n                                radius=\"full\"\n                                showFallback\n                            />\n                        }\n                        endContent={\n                            <Copy02Icon size={16} className=\"text-foreground-400\" />\n                        }\n                    >\n                        {truncateAddress(convertedFrom.address, \"start\")}\n                    </Chip>\n                )\n            case \"to\":\n                const convertedTo = cellValue as Profiler;\n\n                return (\n                    <Chip\n                        size=\"lg\"\n                        radius=\"md\"\n                        className=\"shadow bg-foreground-50 dark:bg-foreground-100 text-foreground-900 text-sm gap-2\"\n                        startContent={\n                            <Avatar\n                                src={convertedTo.avatar}\n                                alt={convertedTo.name}\n                                color=\"primary\"\n                                size=\"sm\"\n                                className=\"w-4 h-4\"\n                                radius=\"full\"\n                                showFallback\n                            />\n                        }\n                        endContent={\n                            <Copy02Icon size={16} className=\"text-foreground-400\" />\n                        }\n                    >\n                        {truncateAddress(convertedTo.address, \"start\")}\n                    </Chip>\n                )\n            case \"token\":\n                const convertedToken = cellValue as Token;\n\n                return (\n                    <Chip\n                        variant=\"light\"\n                        size=\"lg\"\n                        startContent={\n                            <Avatar\n                                src={convertedToken.icon}\n                                alt={convertedToken.name}\n                                color=\"primary\"\n                                size=\"sm\"\n                                className=\"w-4 h-4\"\n                                radius=\"full\"\n                                showFallback\n                            />\n                        }\n                    >\n                        {convertedToken.symbol}\n                    </Chip>\n                )\n            case \"tags\":\n                const convertedTags = cellValue as string[];\n\n                return (\n                    <div className=\"flex gap-2\">\n                        {convertedTags.map((tag, index) => (\n                            <Chip key={index}\n                                className=\"text-xs\"\n                                color= {\n                                    tag === TransactionTagType.Buy ? \"success\" :\n                                    tag === TransactionTagType.Sell ? \"danger\" :\n                                    tag === TransactionTagType.Transfer ? \"warning\" : \"default\"\n                                }\n                                radius=\"md\"\n                                variant=\"flat\"\n                            >\n                                {tag}\n                            </Chip>\n                        ))}\n                    </div>\n                )\n\n\n            default:\n                return <p className=\"w-full overflow-clip\">{cellValue.toString()}</p>;\n        }\n    }, []);\n\n    return (\n        <Table\n            isHeaderSticky\n            aria-label=\"Example table with infinite pagination\"\n            baseRef={scrollerRef}\n            fullWidth\n            bottomContent={\n                hasMore ? (\n                    <div className=\"flex w-full justify-center\">\n                        <Spinner ref={loaderRef} color=\"primary\" />\n                    </div>\n                ) : null\n            }\n            classNames={{\n                base: \"max-h-[520px] overflow-scroll bg-transparent\",\n                table: \"min-h-[400px]\",\n                wrapper: \"w-full bg-foreground-50\",\n            }}\n        >\n            <TableHeader columns={columns}>\n                {(column) => (\n                    <TableColumn\n                        key={column.uid}\n                        allowsSorting={column.sortable}\n                    >\n                        {column.name}\n                    </TableColumn>\n                )}\n            </TableHeader>\n            <TableBody\n                isLoading={isLoading}\n                items={list.items}\n                loadingContent={<Spinner color=\"white\" />}\n                emptyContent=\"No data found\"\n            >\n                {(item: Transaction) => (\n                    <TableRow key={item.id} className=\"w-full\">\n                        {(columnKey) =>\n                            <TableCell>\n                                {renderCell(item, columnKey)}\n                            </TableCell>}\n                    </TableRow>\n                )}\n            </TableBody>\n        </Table>\n    );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 599, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}